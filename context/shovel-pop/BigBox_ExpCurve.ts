/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import * as hz from 'horizon/core';
import { Component, PropTypes } from 'horizon/core';

export class BigBox_ExpCurve extends Component<typeof BigBox_ExpCurve>{
  static propsDefinition = {
    base : { type: PropTypes.Number, default: 100.0 },
    curveSteepness: { type: hz.PropTypes.Number, default: 1.0 },
  };

  xpTable: number[] = [
0, 70, 190, 350, 550, 790, 1070, 1390,
1750, 2150, 2590, 3070, 3590, 4150, 4750, 5390, 6070, 6790,
7550, 8350, 9190, 10070, 10990, 11950, 12950, 13960, 14980, 16010,
17050, 18100, 19160, 20230, 21310, 22400, 23500, 24610, 25730, 26860,
28000, 29150, 30310, 31480, 32660, 33850, 35050, 36260, 37480, 38710,
39950, 41200, 42450, 43700, 44950, 46200, 47450, 48700, 49950, 51200,
52450, 53700, 54950, 56200, 57450, 58700, 59950, 61200, 62450, 63700,
64950, 66200, 67450, 68700, 69950, 71200, 72450, 73700, 74950, 76200,
77450, 78700, 79950, 81200, 82450, 83700, 84950, 86200, 87450, 88700,
89950, 91200, 92450, 93700, 94950, 96200, 97450, 98700, 99950, 101200,
102450, 103700, 104950, 106200, 107450, 108700, 109950, 111200, 112450, 113700,
114950, 116200, 117450, 118700, 119950, 121200, 122450, 123700, 124950, 126200,
127450, 128700, 129950, 131200, 132450, 133700, 134950, 136200, 137450, 138700,
139950, 141200, 142450, 143700, 144950, 146200, 147450, 148700, 149950, 151200,
152450, 153700, 154950, 156200, 157450, 158700, 159950, 161200, 162450, 163700,
164950, 166200, 167450, 168700, 169950, 171200, 172450, 173700, 174950, 176200,
177450, 178700, 179950, 181200, 182450, 183700, 184950, 186200, 187450, 188700,
189950, 191200, 192450, 193700, 194950, 196200, 197450, 198700, 199950, 201200,
202450, 203700, 204950, 206200, 207450, 208700, 209950, 211200, 212450, 213700,
214950, 216200, 217450, 218700, 219950, 221200, 222450, 223700, 224950, 226200,
227450, 228700, 229950, 231200, 232450, 233700, 234950, 236200, 237450, 238700,
239950, 241200, 242450, 243700, 244950, 246200, 247450, 248700, 249950, 251200,
252450, 253700, 254950, 256200, 257450, 258700, 259950, 261200, 262450, 263700,
264950, 266200, 267450, 268700, 269950, 271200, 272450, 273700, 274950, 276200,
277450, 278700, 279950, 281200, 282450, 283700, 284950, 286200, 287450, 288700,
289950, 291200, 292450, 293700, 294950, 296200, 297450, 298700, 299950, 301200,
302450, 303700, 304950, 306200, 307450, 308700, 309950, 311200, 312450, 313700,
314950, 316200, 317450, 318700, 319950, 321200, 322450, 323700, 324950, 326200,
327450, 328700, 329950, 331200, 332450, 333700, 334950, 336200, 337450, 338700,
339950, 341200, 342450, 343700, 344950, 346200, 347450, 348700, 349950, 351200,
352450, 353700, 354950, 356200, 357450, 358700, 359950, 361200, 362450, 363700,
364950, 366200, 367450, 368700, 369950, 371200, 372450, 373700, 374950, 376200,
377450, 378700, 379950, 381200, 382450, 383700, 384950, 386200, 387450, 388700,
389950, 391200, 392450, 393700, 394950, 396200, 397450, 398700, 399950, 401200,
402450, 403700, 404950, 406200, 407450, 408700, 409950, 411200, 412450, 413700,
414950, 416200, 417450, 418700, 419950, 421200, 422450, 423700, 424950, 426200,
427450, 428700, 429950, 431200, 432450, 433700, 434950, 436200, 437450, 438700,
439950, 441200, 442450, 443700, 444950, 446200, 447450, 448700, 449950, 451200,
452450, 453700, 454950, 456200, 457450, 458700, 459950, 461200, 462450, 463700,
464950, 466200, 467450, 468700, 469950, 471200, 472450, 473700, 474950, 476200,
477450, 478700, 479950, 481200, 482450, 483700, 484950, 486200, 487450, 488700,
489950, 491200, 492450, 493700, 494950, 496200, 497450, 498700, 499950, 501200,
502450, 503700, 504950, 506200, 507450, 508700, 509950, 511200, 512450, 513700,
514950, 516200, 517450, 518700, 519950, 521200, 522450, 523700, 524950, 526200,
527450, 528700, 529950, 531200, 532450, 533700, 534950, 536200, 537450, 538700,
539950, 541200, 542450, 543700, 544950, 546200, 547450, 548700, 549950, 551200,
552450, 553700, 554950, 556200, 557450, 558700, 559950, 561200, 562450, 563700,
564950, 566200, 567450, 568700, 569950, 571200, 572450, 573700, 574950, 576200,
577450, 578700, 579950, 581200, 582450, 583700, 584950, 586200, 587450, 588700,
589950, 591200, 592450, 593700, 594950, 596200, 597450, 598700, 599950, 601200,
602450, 603700
  ];

  static instance: BigBox_ExpCurve;

  public ExpToCurrentLevel(exp: number): number {
    let level = this.getLevelFromTable(exp)

    if (level >= 0){
      return level
    }

    // fall back to old algo based level
    level = Math.floor((-10 + Math.sqrt(100 + 80 * (exp + 30))) / 40)
    return level;
  }

  public ExpToPercentToNextLevel(exp: number): number {
    const currentLevel = this.getLevelFromTable(exp)

    let xpForCurrentLevel = 0 // if we're level 0, our xp floor is 0
    if (currentLevel > 0){
      xpForCurrentLevel = this.xpTable[currentLevel - 1]
    }

    const xpToNextLevel = this.xpTable[currentLevel] // kinda confusing, but level is + 1 index so next index is... current level

    const xpLevelDelta = xpToNextLevel - xpForCurrentLevel
    const xpLevelProgress = exp - xpForCurrentLevel

    return xpLevelProgress / xpLevelDelta
  }

  public ExpRequiredForLevel(level: number): number {
    if (level < 0){
      return 0
    }

    if (level >= this.xpTable.length){
      return 0
    }

    return this.xpTable[level]
  }

  private getLevelFromTable(xp: number) : number{
    for(let i = 0; i < this.xpTable.length; i++){
      if (xp < this.xpTable[i]){
        return i
      }
    }

    return -1
  }

  preStart() {
    BigBox_ExpCurve.instance = this;
  }

  start(){
  }
}
Component.register(BigBox_ExpCurve);
